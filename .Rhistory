plot_method="plotly",
branches_lwd=0.1,
main=glue("Fold-changes of proteostasis genes (n={nrow(fc.filt.matrix)}, p < {alpha}) in mouse BMDM studies (N={ncol(fc.filt.matrix)})"),
width=2000, height=4000,
file="~/mrc/project/rna-seq/processed/heatmap.html")
browseURL("~/mrc/project/rna-seq/processed/heatmap.html")
# Make interactive heatmap
heatmaply(fc.filt.matrix,
dist_method="euclidean", hclust_method="complete",
scale="none",
Rowv=Rowv, Colv=TRUE,
seriate="mean",
colors=palette,
limits=c(-15, 15),
labRow=rownames(fc.filt.matrix),
row_dend_left=TRUE,
na.rm=FALSE, na.value="black",
key.title="fold-change",
plot_method="plotly",
branches_lwd=0.1,
main=glue("Fold-changes of proteostasis genes (n={nrow(fc.filt.matrix)}, p < {alpha}) in mouse BMDM studies (N={ncol(fc.filt.matrix)})"),
width=2000, height=4000,
file="~/mrc/project/rna-seq/processed/heatmap.html")
browseURL("~/mrc/project/rna-seq/processed/heatmap.html")
# Make interactive heatmap
heatmaply(fc.filt.matrix,
dist_method="euclidean", hclust_method="complete",
scale="none",
Rowv=Rowv, Colv=TRUE,
seriate="mean",
colors=palette,
limits=c(-15, 15),
labRow=rownames(fc.filt.matrix),
row_dend_left=TRUE,
na.rm=FALSE, na.value="black",
key.title="fold-change",
plot_method="plotly",
branches_lwd=0.1,
main=glue("Fold-changes of proteostasis genes (n={nrow(fc.filt.matrix)}, p < {alpha}) in mouse BMDM studies (N={ncol(fc.filt.matrix)})"),
width=2000, height=4000,
file="~/mrc/project/rna-seq/processed/heatmap.html")
browseURL("~/mrc/project/rna-seq/processed/heatmap.html")
#### Heatmap ####
# Set up colour palette
palette <- colorRampPalette(c("blue", "white", "red"))(n=299)
# Clustering on rows and columns
Rowv <- fc.filt.matrix %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k=5) %>% set("branches_lwd", 4) %>%
rotate_DendSer(ser_weight=dist(fc.filt.matrix))
Colv <- fc.filt.matrix %>% t %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k=2) %>% set("branches_lwd", 4) %>%
rotate_DendSer(ser_weight=dist(t(fc.filt.matrix)))
# Plot and save static heatmap
png(file="~/mrc/project/rna-seq/processed/heatmap.png",
width=3000, height=9000, res=300)
hm <- heatmap.2(fc.filt.matrix,
scale="none",
main=glue("Fold-changes of proteostasis genes (n={nrow(fc.filt.matrix)})
in mouse BMDM studies (N={ncol(fc.filt.matrix)}),
p < {alpha}"),
Rowv=Rowv, Colv=TRUE,
srtCol=45,
labRow=FALSE, # row.names(fc.filt.matrix)
notecol="black",
density.info="none",
trace="none",
col=palette,
symbreaks=TRUE,
na.color="black",
key=TRUE, keysize=1, lhei=c(1, 15), key.xlab="log2(fold-change)")
hm
dev.off()
#### Interactive heatmap ####
library(heatmaply)
require("knitr")
opts_knit$set(root.dir="~/mrc/project/sita_eisa/")
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
library(biomaRt)
})
add_ensembl_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensembl <- useMart("ensembl")
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
filter <- "ensembl_gene_id"
} else if (grepl("WBGene", genes[1], fixed=TRUE)) {
ensembl <- useMart(biomart = "parasite_mart",
host = "https://parasite.wormbase.org",
port = 443)
ensemblDataset <- "wbps_gene"
symbol <- "external_gene_id"
filter <- "wbps_gene_id"
}
mart <- useDataset(ensemblDataset, ensembl)
geneList <- getBM(filters=filter,
attributes=c(filter, symbol),
values=genes,
mart=mart) %>% distinct(ensembl_gene_id, .keep_all=TRUE)
row.names(geneList) <- geneList[, 1]
geneList[, 1] <- NULL
table$geneSymbol <- geneList[, 1][match(rownames(table), rownames(geneList))]
newTable <- table
return(newTable)
}
format_condition <- function (colnames) {
replace <- c("_[0-9]*$", "_rep[0-9]*$", "^[A-Z]{3}[0-9]+_", "^[0-9]+_")
for (r in replace) {
colnames <- gsub(r, "", colnames)
}
return(colnames)
}
require("knitr")
opts_knit$set(root.dir="~/mrc/project/sita_eisa/")
gse <- "GSE154573"
selectConditions <- c("WT", "KO") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
require("knitr")
opts_knit$set(root.dir="~/mrc/project/sita_eisa/")
gse <- "GSE154573"
selectConditions <- c("WT", "KO") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) + ggtitle(glue("{gse}: Exonic counts"))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) + ggtitle(glue("{gse}: Intronic counts"))
dev.off()
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[1]} vs. {conditions[2]}"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
gse <- "GSE154573"
selectConditions <- c("WT", "KO") # control vs. treatment
alpha <- 0.15
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) + ggtitle(glue("{gse}: Exonic counts"))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) + ggtitle(glue("{gse}: Intronic counts"))
dev.off()
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
gse <- "GSE154573"
selectConditions <- c("WT", "KO") # control vs. treatment
alpha <- 0.05
exon <- read.table(glue("processed/{gse}_ExonicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
intron <- read.table(glue("processed/{gse}_IntronicCounts.txt"), header=TRUE, sep="\t", row.names=1, check.names=FALSE)
#### PCA ####
# Create DDS object
colData.ex <- data.frame(row.names=colnames(exon),
condition=format_condition(colnames(exon)))
dds.ex <- DESeqDataSetFromMatrix(countData=exon,
colData=colData.ex,
design=~condition)
colData.in <- data.frame(row.names=colnames(intron),
condition=format_condition(colnames(intron)))
dds.in <- DESeqDataSetFromMatrix(countData=intron,
colData=colData.in,
design=~condition)
# PCA plot
rld.ex <- vst(dds.ex, blind=TRUE)
rld.in <- vst(dds.in, blind=TRUE)
png(glue("processed/{gse}_PCA_exon.png"))
plotPCA(rld.ex) + ggtitle(glue("{gse}: Exonic counts"))
dev.off()
png(glue("processed/{gse}_PCA_intron.png"))
plotPCA(rld.in) + ggtitle(glue("{gse}: Intronic counts"))
dev.off()
# Select columns
exon <- exon %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
intron <- intron %>% dplyr::select(matches(selectConditions)) %>% as.matrix()
head(exon)
# Filter for genes which have ≥ 1 exon and intron
shared <- intersect(rownames(exon), rownames(intron))
exonsh <- exon[shared, ]
intronsh <- intron[shared, ]
message("No. of genes with ≥ 1 exon and intron: ", nrow(exonsh))
# Checks
allsh <- exonsh + intronsh
fracIn <- colSums(intronsh) / colSums(allsh)
summary(fracIn)
unique(format_condition(colnames(exon)))
# Format and select conditions for each sample
cond <- format_condition(colnames(exon))
conditions <- unique(cond)
cond <- factor(cond, levels=rev(conditions)) # condition / control
stopifnot(all(colnames(exonsh) == colnames(intronsh)))
res_eisar <- runEISA(cntEx=exonsh, cntIn=intronsh,
cond=cond,
method=NULL,
modelSamples=TRUE,
geneSelection="filterByExpr",
statFramework="QLF",
effects="predFC",
pscnt=2,
recalcNormFactAfterFilt=TRUE,
recalcLibSizeAfterFilt=FALSE)
message(glue("No. of significant DE genes (FDR < {alpha}): "),
nrow(res_eisar$tab.ExIn %>% filter(FDR < alpha)))
# Add gene symbol
res_eisar$tab.ExIn <- add_ensembl_symbol(res_eisar$tab.ExIn)
# Ratio of up and down regulated significant genes
nUp <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC > 0))
nDown <- nrow(filter(res_eisar$tab.ExIn, FDR < alpha & logFC < 0))
ratioUpDown <- nUp / nDown
message("Ratio of up:down regulated genes: ", ratioUpDown)
# EISA MA plot
MAplot <- ggplot(res_eisar$tab.ExIn, aes(x=logCPM, y=logFC)) +
geom_point(color="lightgrey") +
geom_point(data=res_eisar$tab.ExIn %>% filter(FDR < alpha),
color="red") +
labs(title=glue("{gse}: {conditions[2]} vs. {conditions[1]} (p < {alpha})"),
caption=glue("UP={nUp}, DOWN={nDown}")) +
theme_bw() +
theme(plot.title=element_text(size=15, face="bold"),
plot.caption=element_text(size=15))
MAplot
# Save output
png(glue("processed/{gse}_eisaMAplot_{conditions[1]}.{conditions[2]}.png"))
print(MAplot)
dev.off()
deGenes <- res_eisar$tab.ExIn %>% arrange(FDR, -logFC)
write.table(deGenes, file=glue("./processed/{gse}_eisaDE_{conditions[1]}.{conditions[2]}.txt"), sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
BiocManager::install("UniProt.ws")
#### Packages ####
library(biomaRt)
BioMart2fc.fun()
BioMart2df.fun()
install.packages("CORNA")
#### Packages ####
library(biomaRt)
#### Config ####
setwd("/Users/Pomato/mrc/project/rna-seq")
#### Load data ####
data <- read.table(glue("./processed/GSE154573/GSE154573_DESeq_KO_vs_WT.txt"),
sep="\t", header=T)
#### Packages ####
library(biomaRt)
#### Config ####
setwd("/Users/Pomato/mrc/project/rna-seq")
#### Load data ####
data <- read.table("./processed/GSE154573/GSE154573_DESeq_KO_vs_WT.txt",
sep="\t", header=T)
data
listMarts()
mart <- useMart(biomart="ensembl", dataset="mmusculus_gene_ensembl")
listAttributes(mart)
#### Query ####
mart <- useMart(biomart="ensembl", dataset="mmusculus_gene_ensembl")
results <- getBM(attributes=c("ensembl_gene_id", "go_molecular_function__dm_name_1006"),
filters="ensembl_gene_id",
values=gene.ids, mart=mart)
data <- read.table("./processed/GSE154573/GSE154573_DESeq_KO_vs_WT.txt",
sep="\t", header=T)
gene.ids <- rownames(data)
gene.ids
results <- getBM(attributes=c("ensembl_gene_id", "go_molecular_function__dm_name_1006"),
filters="ensembl_gene_id",
values=gene.ids, mart=mart)
listAttributes(mart)
View(mart)
View(mart)
attr <- listAttributes(mart)
View(attr)
View(attr)
source('~/mrc/project/chip-seq/scripts/Analyse_ChIP-seq.R')
results <- getBM(attributes=c("ensembl_gene_id", "name_1006"),
filters="ensembl_gene_id",
values=gene.ids, mart=mart)
results
View(results)
View(results)
View(attr)
View(attr)
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("Biobase", "biomaRt", "GEOquery", "RCurl"))
BiocManager::install("GEOquery")
#### Packages ####
library(biomaRt)
library(CORNA)
rm(list=ls())
#### Packages ####
library(biomaRt)
library(CORNA)
tran2gocc <- BioMart2df.fun(biomart="ensembl", dataset="mmusculus_gene_ensembl",
col.old=c("ensembl_transcript_id", "go_cellular_component_id"),
col.new=c("ensembl_transcript", "gocc"))
#### Packages ####
library(biomaRt)
#### Config ####
setwd("/Users/Pomato/mrc/project/rna-seq")
#### Load data ####
data <- read.table("./processed/GSE154573/GSE154573_DESeq_KO_vs_WT.txt",
sep="\t", header=T)
gene.ids <- rownames(data)
#### Query ####
mart <- useMart(biomart="ensembl", dataset="mmusculus_gene_ensembl")
results <- getBM(attributes=c("ensembl_gene_id", "go_id", "name_1006", "definition_1006"),
filters="ensembl_gene_id",
values=gene.ids, mart=mart)
View(results)
View(results)
rm(list=ls())
require("knitr")
opts_knit$set(root.dir="~/mrc/project/sita_eisa/")
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
library(biomaRt)
})
suppressPackageStartupMessages({
library(eisaR)
library(ggplot2)
library(dplyr)
library(glue)
library(DESeq2)
library(biomaRt)
})
