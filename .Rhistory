# Design
group <- "WT"
control <- "T0"
treatment <- "T3"
# counts$Length <- NULL
counts <- cbind(gene=rownames(counts), counts)
counts$gene <- gsub("\\.[0-9_A-Z]+$", "", counts$gene)
# Aggregate genes with same name
counts <- aggregate(counts[, -1], by=list(gene=counts$gene), FUN=sum)
rownames(counts) <- counts$gene
counts$gene <- NULL
# Group counts
counts.grp <- dplyr::select(counts, matches(group))
#### DESeq2 ####
# Parameters
alpha <- 0.05
lfcThresh <- 0
# Create DDS object
colData <- data.frame(row.names=colnames(counts.grp),
condition=format_condition(colnames(counts.grp)))
dds <- DESeqDataSetFromMatrix(countData=counts.grp,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=glue(control))
# PCA plot
rld <- vst(dds, blind=TRUE)
plotPCA(rld)
# Remove low count data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# DESeq2 analysis
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", treatment, control),
alpha=alpha, lfcThreshold=lfcThresh)
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
#### Visualisation ####
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
proj <- "PROJ1672"
counts <- read.table(glue("processed/{proj}_rawCounts.txt"), header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
# Design
group <- "WT"
control <- "WT_T0"
treatment <- "WT_T3"
# counts$Length <- NULL
counts <- cbind(gene=rownames(counts), counts)
counts$gene <- gsub("\\.[0-9_A-Z]+$", "", counts$gene)
# Aggregate genes with same name
counts <- aggregate(counts[, -1], by=list(gene=counts$gene), FUN=sum)
rownames(counts) <- counts$gene
counts$gene <- NULL
# Group counts
counts.grp <- dplyr::select(counts, matches(group))
#### DESeq2 ####
# Parameters
alpha <- 0.05
lfcThresh <- 0
# Create DDS object
colData <- data.frame(row.names=colnames(counts.grp),
condition=format_condition(colnames(counts.grp)))
dds <- DESeqDataSetFromMatrix(countData=counts.grp,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=glue(control))
# PCA plot
rld <- vst(dds, blind=TRUE)
plotPCA(rld)
# Remove low count data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# DESeq2 analysis
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", treatment, control),
alpha=alpha, lfcThreshold=lfcThresh)
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
#### Visualisation ####
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
alpha <- 1e-10
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
alpha <- 1e-10
DESeq2::plotMA(res, alpha=alpha,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
alpha <- 1e-10
DESeq2::plotMA(res, alpha=alpha,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
alph
alpha
1-alpha
alpha <- 0.01
DESeq2::plotMA(res, alpha=alpha,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
alpha <- 0.01
DESeq2::plotMA(res, alpha=alpha,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
alpha <- 1e-10
DESeq2::plotMA(res, alpha=alpha,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
res
alpha <- 1e-10
lfcThresh <- 0
# Create DDS object
colData <- data.frame(row.names=colnames(counts.grp),
condition=format_condition(colnames(counts.grp)))
dds <- DESeqDataSetFromMatrix(countData=counts.grp,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=glue(control))
# PCA plot
rld <- vst(dds, blind=TRUE)
plotPCA(rld)
# Remove low count data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# DESeq2 analysis
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", treatment, control),
alpha=alpha, lfcThreshold=lfcThresh)
# res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
#write.table(deGenes,
#file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
#row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
#### Visualisation ####
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}"))
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
png(glue("processed/{proj}_MAplot_{treatment}_vs_{control}.png"))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}
alpha={alpha}"))
dev.off()
proj <- "PROJ1672"
counts <- read.table(glue("processed/{proj}_rawCounts.txt"), header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
# Design
group <- "WT"
control <- "WT_T0"
treatment <- "WT_T5"
# counts$Length <- NULL
counts <- cbind(gene=rownames(counts), counts)
counts$gene <- gsub("\\.[0-9_A-Z]+$", "", counts$gene)
# Aggregate genes with same name
counts <- aggregate(counts[, -1], by=list(gene=counts$gene), FUN=sum)
rownames(counts) <- counts$gene
counts$gene <- NULL
# Group counts
counts.grp <- dplyr::select(counts, matches(group))
#### DESeq2 ####
# Parameters
alpha <- 1e-10
lfcThresh <- 0
# Create DDS object
colData <- data.frame(row.names=colnames(counts.grp),
condition=format_condition(colnames(counts.grp)))
dds <- DESeqDataSetFromMatrix(countData=counts.grp,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=glue(control))
# PCA plot
rld <- vst(dds, blind=TRUE)
plotPCA(rld)
# Remove low count data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# DESeq2 analysis
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", treatment, control),
alpha=alpha, lfcThreshold=lfcThresh)
# res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
#### Visualisation ####
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
png(glue("processed/{proj}_MAplot_{treatment}_vs_{control}.png"))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}
alpha={alpha}"))
dev.off()
res <- add_ensembl_symbol(res)
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
#### Visualisation ####
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
png(glue("processed/{proj}_MAplot_{treatment}_vs_{control}.png"))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}
alpha={alpha}"))
dev.off()
proj <- "PROJ1672"
counts <- read.table(glue("processed/{proj}_rawCounts.txt"), header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
# Design
group <- "B3KO"
control <- "B3KO_T0"
treatment <- "B3KO_T5"
# counts$Length <- NULL
counts <- cbind(gene=rownames(counts), counts)
counts$gene <- gsub("\\.[0-9_A-Z]+$", "", counts$gene)
# Aggregate genes with same name
counts <- aggregate(counts[, -1], by=list(gene=counts$gene), FUN=sum)
rownames(counts) <- counts$gene
counts$gene <- NULL
# Group counts
counts.grp <- dplyr::select(counts, matches(group))
#### DESeq2 ####
# Parameters
alpha <- 1e-10
lfcThresh <- 0
# Create DDS object
colData <- data.frame(row.names=colnames(counts.grp),
condition=format_condition(colnames(counts.grp)))
dds <- DESeqDataSetFromMatrix(countData=counts.grp,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=glue(control))
# PCA plot
rld <- vst(dds, blind=TRUE)
plotPCA(rld)
# Remove low count data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# DESeq2 analysis
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", treatment, control),
alpha=alpha, lfcThreshold=lfcThresh)
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
#### Visualisation ####
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
png(glue("processed/{proj}_MAplot_{treatment}_vs_{control}.png"))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}
alpha={alpha}"))
dev.off()
proj <- "PROJ1672"
counts <- read.table(glue("processed/{proj}_rawCounts.txt"), header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
# Design
group <- "B3KO"
control <- "B3KO_T0"
treatment <- "B3KO_T3"
# counts$Length <- NULL
counts <- cbind(gene=rownames(counts), counts)
counts$gene <- gsub("\\.[0-9_A-Z]+$", "", counts$gene)
# Aggregate genes with same name
counts <- aggregate(counts[, -1], by=list(gene=counts$gene), FUN=sum)
rownames(counts) <- counts$gene
counts$gene <- NULL
# Group counts
counts.grp <- dplyr::select(counts, matches(group))
#### DESeq2 ####
# Parameters
alpha <- 1e-10
lfcThresh <- 0
# Create DDS object
colData <- data.frame(row.names=colnames(counts.grp),
condition=format_condition(colnames(counts.grp)))
dds <- DESeqDataSetFromMatrix(countData=counts.grp,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=glue(control))
# PCA plot
rld <- vst(dds, blind=TRUE)
plotPCA(rld)
# Remove low count data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# DESeq2 analysis
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", treatment, control),
alpha=alpha, lfcThreshold=lfcThresh)
res <- add_ensembl_symbol(res)
#### Visualisation ####
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
png(glue("processed/{proj}_MAplot_{treatment}_vs_{control}.png"))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}
alpha={alpha}"))
dev.off()
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
require("knitr")
opts_knit$set(root.dir="~/mrc/project/rna-seq/")
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(limma)
})
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
set1
nrow(set1)
nrow(set2)
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
set1
nrow(set1)
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set1
totalSet <- unique(set1 + set2)
totalSet <- unique(c(set1, set2))
totalSet1
totalSet
length(totalSet)
length(set1)
length(set2)
WT <- totalSet %in% set1
HSPB3_KO <- totalSet %in% set2
WT
sum(WT)
WT <- set1 %in% totalSet
HSPB3_KO <- set2 %in% totalSet
sum(WT)
totalSet <- unique(c(set1, set2))
length(c(set1, set2))
length(unique(c(set1, set2)))
WT <- totalSet %in% set1
HSPB3_KO <- totalSet %in% set2
HSPB3_KO
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
total <- unique(c(set1, set2))
WT <- total %in% set1
HSPB3_KO <- total %in% set2
totalSet <- cbind(WT, HSPB3KO)
totalSet <- cbind(WT, HSPB3_KO)
totalSet
venn <- vennCounts(totalSet)
vennDiagram(venn)
venn <- vennCounts(totalSet)
vennDiagram(venn, include="both",
names=c("WT", "HSPB3 KO"),
cex=1, counts.col="blue")
venn <- vennCounts(totalSet)
vennDiagram(venn,
names=c("WT", "HSPB3 KO"),
cex=1, counts.col="blue")
vennDiagram(venn,
names=c("WT", "HSPB3 KO"),
cex=1, counts.col="blue",
main="T3")
vennDiagram(venn,
names=c("WT", "HSPB3 KO"),
counts.col="blue",
main="T3")
vennDiagram(venn,
names=c("WT", "HSPB3 KO"),
cex=1, counts.col="blue",
main="T3")
vennDiagram(venn,
names=c("WT", "HSPB3 KO"), cex=1,
counts.col="blue",
main="T3", cex.main=2)
vennDiagram(venn,
names=c("WT", "HSPB3 KO"), cex=1,
counts.col="blue",
main="T3", cex.main=2, adj=0.5)
vennDiagram(venn,
names=c("WT", "HSPB3 KO"), cex=1,
counts.col="blue")
title("T3", line=-2)
title("T3", line=-2, cex=2)
venn <- vennCounts(totalSet)
vennDiagram(venn,
names=c("WT", "HSPB3 KO"), cex=1,
counts.col="blue")
title("T3", line=-2, cex=2)
vennDiagram(venn,
names=c("WT", "HSPB3 KO"), cex=1,
counts.col="blue",
main="T3", cex.main=2)
BiocManager::install("ggVennDiagram")
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
})
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
totalSet <- list(
WT=set1,
HSPB3_KO=set2
)
# Generate Venn Diagram
ggVennDiagram(totalSet)
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO"))
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO"),
stroke_size=0.5)
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO"),
cat.just=list(c(0,0), c(0,1)))
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO"))
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3"))
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO"))
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO")) +
theme(legend.position="right")
suppressPackageStartupMessages({
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
library(ggplot2)
})
suppressPackageStartupMessages({
library(ggplot2)
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
})
require("knitr")
opts_knit$set(root.dir="~/mrc/project/rna-seq/")
suppressPackageStartupMessages({
library(ggplot2)
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
})
