require("knitr")
opts_knit$set(root.dir="~/mrc/project/rna-seq/")
suppressPackageStartupMessages({
library(ggplot2)
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
})
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
require("knitr")
opts_knit$set(root.dir="~/mrc/project/rna-seq/")
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
totalSet <- list(
set1=set1,
set2=set2
)
# Generate Venn Diagram
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO")) +
theme(legend.position="right")
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
totalSet <- list(
set1=set1,
set2=set2
)
# Generate Venn Diagram
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO")) +
theme(legend.position="left")
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
totalSet <- list(
set1=set1,
set2=set2
)
# Generate Venn Diagram
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO")) +
theme(legend.position="bottom")
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
totalSet <- list(
set1=set1,
set2=set2
)
# Generate Venn Diagram
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3")) +
theme(legend.position="bottom")
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha) %>% rownames()
totalSet <- list(
set1=set1,
set2=set2
)
# Generate Venn Diagram
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO")) +
theme(legend.position="bottom")
wt <- subset(set1, rownames(set1) %in% set1 && !(rownames(set1) %in% set2))
wt
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
totalSet <- list(
set1=rownames(set1),
set2=rownames(set2)
)
# Generate Venn Diagram
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO")) +
theme(legend.position="bottom")
# Parse Venn diagram into separate lists
wt <- subset(set1, rownames(set1) %in% set1 && !(rownames(set1) %in% set2))
wt
wt <- subset(set1, (rownames(set1) %in% set1) && !(rownames(set1) %in% set2))
wt
wt <- set1[which(rownames(set1) %in% set1) & !(rownames(set1) %in% set2), ]
wt
wt <- set1[which(rownames(set1) %in% set1 & !(rownames(set1) %in% set2)), ]
wt
!(rownames(set1) %in% set2)
rownames(set1) %in% set2
rownames(set1) %in% set1 & !(rownames(set1) %in% set2)
wt <- set1[which((rownames(set1) %in% set1) & !(rownames(set1) %in% set2)), ]
wt
wt <- set1[(rownames(set1) %in% set1) & !(rownames(set1) %in% set2), ]
wt
(rownames(set1) %in% set1)
wt <- set1[(rownames(set1) %in% rownames(set1)) &
!(rownames(set1) %in% rownames(set2)), ]
wt
nrow(wt)
wt <- set1[!(rownames(set1) %in% rownames(set2)), ]
hspb3 <- set2[!(rownames(set2) %in% rownames(set1)), ]
both <- set1[!(rownames(set1) %in% rownames(wt))]
both <- set1[!(rownames(set1) %in% rownames(wt)), ]
proj <- "PROJ1672"
write.table(wt,
file=glue("processed/{proj}_T3_WTonly.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(hspb3,
file=glue("processed/{proj}_T3_HSPB3only.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(both,
file=glue("processed/{proj}_T3_WTandHSPB3.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
totalSet <- list(
set1=rownames(set1),
set2=rownames(set2)
)
# Generate Venn Diagram
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3 KO")) +
theme(legend.position="bottom") +
ggtitle(glue("T3 genes (alpha={alpha})"))
# Parse Venn diagram into separate lists
wt <- set1[!(rownames(set1) %in% rownames(set2)), ]
hspb3 <- set2[!(rownames(set2) %in% rownames(set1)), ]
both <- set1[!(rownames(set1) %in% rownames(wt)), ]
write.table(wt,
file=glue("processed/{proj}_T3_WTonly_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(hspb3,
file=glue("processed/{proj}_T3_HSPB3only_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(both,
file=glue("processed/{proj}_T3_WTandHSPB3_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3")) +
theme(legend.position="bottom") +
ggtitle(glue("T3 genes (alpha={alpha})"))
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T3_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T3_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
totalSet <- list(
set1=rownames(set1),
set2=rownames(set2)
)
# Generate Venn Diagram
venn <- ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3")) +
theme(legend.position="bottom") +
ggtitle(glue("T3 genes (alpha={alpha})"))
ggsave(glue("processed/{proj}_venn_T3.png"), venn)
# Parse Venn diagram into separate lists
wt <- set1[!(rownames(set1) %in% rownames(set2)), ]
hspb3 <- set2[!(rownames(set2) %in% rownames(set1)), ]
both <- set1[!(rownames(set1) %in% rownames(wt)), ]
write.table(wt,
file=glue("processed/{proj}_T3_WTonly_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(hspb3,
file=glue("processed/{proj}_T3_HSPB3only_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(both,
file=glue("processed/{proj}_T3_WTandHSPB3_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
alpha <- 1e-10
set1 <- read.table(glue("processed/PROJ1672_DESeq_WT_T5_vs_WT_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
set2 <- read.table(glue("processed/PROJ1672_DESeq_B3KO_T5_vs_B3KO_T0.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE) %>%
filter(padj < alpha)
totalSet <- list(
set1=rownames(set1),
set2=rownames(set2)
)
# Generate Venn Diagram
venn <- ggVennDiagram(totalSet,
category.names=c("WT", "HSPB3")) +
theme(legend.position="bottom") +
ggtitle(glue("T5 genes (alpha={alpha})"))
ggsave(glue("processed/{proj}_venn_T5.png"), venn)
# Parse Venn diagram into separate lists
wt <- set1[!(rownames(set1) %in% rownames(set2)), ]
hspb3 <- set2[!(rownames(set2) %in% rownames(set1)), ]
both <- set1[!(rownames(set1) %in% rownames(wt)), ]
write.table(wt,
file=glue("processed/{proj}_T5_WTonly_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(hspb3,
file=glue("processed/{proj}_T5_HSPB3only_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
write.table(both,
file=glue("processed/{proj}_T5_WTandHSPB3_{alpha}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
require("knitr")
opts_knit$set(root.dir="~/mrc/project/rna-seq/")
suppressPackageStartupMessages({
library(ggplot2)
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
})
install.packages("ggVennDiagram")
suppressPackageStartupMessages({
library(ggplot2)
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
})
require("knitr")
opts_knit$set(root.dir="~/mrc/project/rna-seq/")
suppressPackageStartupMessages({
library(ggplot2)
library(DESeq2)
library(glue)
library(biomaRt)
library(dplyr)
library(ggVennDiagram)
})
add_ensembl_symbol <- function (table) {
genes <- row.names(table)
if (grepl("ENSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "hsapiens_gene_ensembl"
symbol <- "hgnc_symbol"
} else if (grepl("ENSMUSG", genes[1], fixed=TRUE)) {
ensemblDataset <- "mmusculus_gene_ensembl"
symbol <- "mgi_symbol"
}
mart <- useDataset(ensemblDataset, useMart("ENSEMBL_MART_ENSEMBL", host="http://www.ensembl.org"))
geneList <- getBM(filters="ensembl_gene_id",
attributes=c("ensembl_gene_id", symbol),
values=genes,
mart=mart)
geneList <- distinct(geneList, ensembl_gene_id, .keep_all=TRUE)
row.names(geneList) <- geneList[, 1]
geneList[, 1] <- NULL
table$geneSymbol <- geneList[, 1][match(rownames(table), rownames(geneList))]
newTable <- table
return(newTable)
}
format_condition <- function (colnames) {
replace <- c("_[0-9]*$", "_rep[0-9]*$", "^[A-Z]{3}[0-9]+_", "^[0-9]+_")
for (r in replace) {
colnames <- gsub(r, "", colnames)
}
return(colnames)
}
proj <- "GSE154573"
counts <- read.table(glue("processed/{proj}_rawCounts.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
require("knitr")
opts_knit$set(root.dir="~/mrc/project/rna-seq/")
proj <- "GSE154573"
counts <- read.table(glue("processed/{proj}_rawCounts.txt"),
header=TRUE, sep='\t',
row.names=1, check.names=FALSE)
# Design
control <- "WT"
treatment <- "KO"
alpha <- 0.05
lfcThresh <- 0
# counts$Length <- NULL
counts <- cbind(gene=rownames(counts), counts)
counts$gene <- gsub("\\.[0-9_A-Z]+$", "", counts$gene)
# Aggregate genes with same name
counts <- aggregate(counts[, -1], by=list(gene=counts$gene), FUN=sum)
rownames(counts) <- counts$gene
counts$gene <- NULL
counts
counts$Length <- NULL
counts
# Create DDS object
colData <- data.frame(row.names=colnames(counts),
condition=format_condition(colnames(counts)))
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=control)
# PCA plot
rld <- vst(dds, blind=TRUE)
plotPCA(rld)
# Remove low count data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# DESeq2 analysis
dds <- DESeq(dds)
res <- results(dds, contrast=c("condition", treatment, control),
alpha=alpha, lfcThreshold=lfcThresh)
# Add gene symbol
res <- add_ensembl_symbol(res)
# Save DESeq results table to output
deGenes <- as.data.frame(res) %>% arrange(padj, desc(log2FoldChange)) # order by adjusted p-value and FC
write.table(deGenes,
file=glue("processed/{proj}_DESeq_{treatment}_vs_{control}.txt"),
row.names=TRUE, col.names=TRUE, sep="\t", quote=FALSE)
# Visualisation
nUp <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange > 0))
nDown <- nrow(filter(as.data.frame(res), padj < alpha & log2FoldChange < 0))
png(glue("processed/{proj}_MAplot_{treatment}_vs_{control}.png"))
DESeq2::plotMA(res,
main=glue("{proj}: {treatment} vs. {control}
n={nUp + nDown}, UP={nUp}, DOWN={nDown}
alpha={alpha}"))
dev.off()
colData <- data.frame(row.names=colnames(counts),
condition=format_condition(colnames(counts)))
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=colData,
design=~condition)
dds$condition <- relevel(dds$condition, ref=control)
# PCA plot
rld <- vst(dds, blind=TRUE)
png(glue("processed/{proj}_PCA.png"))
plotPCA(rld)
dev.off()
