#### Packages ####
import glob, os
import pandas as pd
import subprocess

#### Functions ####
def get_samples(path, ext):
    samples = set([os.path.basename(sample).replace(f".{ext}", '') for sample in glob.glob(f"{path}*.{ext}")
              if not any(match in os.path.basename(sample) for match in ['trimmed', 'val'])])

    if LAYOUT == 'PAIRED':
        samples = set([sample[:-2] for sample in samples])

    return samples

def get_raw_reads(wcs):
    if LAYOUT == 'PAIRED':  # Paired-end
        return expand(f"{PREFIX}/fastq/{{sample}}_{{i}}.{EXT}", sample=SAMPLES, i=[1, 2])

    if LAYOUT == 'SINGLE':  # Single-end
        return expand(f"{PREFIX}/fastq/{{sample}}.{EXT}", sample=SAMPLES)

def get_trimmed_reads(wcs):
    if LAYOUT == 'PAIRED':  # Paired-end
        return [f"{PREFIX}/fastq_trimmed/{wcs.sample}_{i}_val_{i}.fq.gz" for i in [1, 2]]

    if LAYOUT == 'SINGLE':  # Single-end
        return [f"{PREFIX}/fastq_trimmed/{wcs.sample}_trimmed.fq.gz"]

def get_fastqc(wcs):
    if LAYOUT == 'PAIRED':  # Paired-end
        return expand(f"{PREFIX}/qc/{{sample}}_{{i}}_fastqc.html", sample=SAMPLES, i=[1, 2])

    if LAYOUT == 'SINGLE':  # Single-end
        return expand(f"{PREFIX}/qc/{{sample}}_fastqc.html", sample=SAMPLES)

def get_layout(metadata_path):
    metadata = pd.read_csv(metadata_path, header=0, sep=',')

    return metadata['LibraryLayout'][0]

def get_organism(metadata_path):
    metadata = pd.read_csv(metadata_path, header=0, sep=',')
    organism_name = metadata['Organism'][0]

    return organism_name.replace(' ', '_').lower()

def infer_strandedness(bedgenome_path, bam_path):
    p = subprocess.Popen(['infer_experiment.py', '-r', bedgenome_path, '-i', bam_path],
            stdout=subprocess.PIPE)
    output = str(p.stdout.read())

    print(output)

    rseqc_out = output.split('\\n')
    fr_firststrand = float(rseqc_out[5].split(' ')[-1])
    fr_secondstrand = float(rseqc_out[4].split(' ')[-1])

    threshold = 0.8

    if fr_firststrand > threshold:
        library_type = 'fr-firststrand'
    elif fr_secondstrand > threshold:
        library_type = 'fr-secondstrand'
    else:
        library_type = 'fr-unstranded'

    if library_type == 'fr-firststrand' and LAYOUT == 'PAIRED':
        strandedness = 2
    elif library_type == 'fr-secondstrand' and LAYOUT == 'PAIRED':
        strandedness = 1
    elif library_type == 'fr-firststrand' and LAYOUT == 'SINGLE':
        strandedness = 2
    elif library_type == 'fr-secondstrand' and LAYOUT == 'SINGLE':
        strandedness = 1
    elif library_type == 'fr-unstranded':
        strandedness = 0

        print(f"featureCounts strandedness: {strandedness}")
    
    return strandedness

def custom_param(param, default):
    try:
        return config[param]

    except KeyError:
        return default

#### Config ####
configfile: "config/config.yaml"
workdir: config['base']
localrules: all

PREFIX = f"data/{config['proj']}"
EXT = str(custom_param('ext', 'fastq.gz'))

if os.path.exists(f"{PREFIX}/SraRunTable_{config['proj']}.txt"):
    LAYOUT = get_layout(f"{PREFIX}/SraRunTable_{config['proj']}.txt")
    ORGANISM = get_organism(f"{PREFIX}/SraRunTable_{config['proj']}.txt")
else:
    LAYOUT = config['layout']
    ORGANISM = config['organism']

SAMPLES = get_samples(f"{PREFIX}/fastq/", EXT)

#### Workflow ####
rule all:
    input:
        expand(f"{PREFIX}/bam/{{sample}}.bam", sample=SAMPLES),
        f"{PREFIX}/processed/{config['proj']}_rawCounts.txt",
        f"{PREFIX}/qc/multiqc_report.html"
    params:
        job_name = f"{config['proj']}_ALL"
    resources:
        time_min = 1,
        cpus = 1

rule fastqc_single:
    input:
        get_raw_reads
    output:
        expand(f"{PREFIX}/qc/{{sample}}_fastqc.html", sample=SAMPLES)
    conda:
        "envs/qc.yml"
    resources:
        time_min = 60,
        cpus = len(SAMPLES) if len(SAMPLES) < 32 else 32
    params:
        job_name = f"{config['proj']}_FASTQC"
    shell:
        f"fastqc -t {{resources.cpus}} -o {PREFIX}/qc {{input}}"

rule fastqc_paired:
    input:
        get_raw_reads
    output:
        expand(f"{PREFIX}/qc/{{sample}}_{{i}}_fastqc.html", sample=SAMPLES, i=[1, 2])
    conda:
        "envs/qc.yml"
    resources:
        time_min = 60,
        cpus = len(SAMPLES) * 2 if len(SAMPLES) < 16 else 32
    params:
        job_name = f"{config['proj']}_FASTQC"
    shell:
        f"fastqc -t {{resources.cpus}} -o {PREFIX}/qc {{input}}"

rule trimgalore_single:
    input:
        expand(f"{PREFIX}/fastq/{{sample}}.{EXT}", sample=SAMPLES)
    output:
        expand(f"{PREFIX}/fastq_trimmed/{{sample}}_trimmed.fq.gz", sample=SAMPLES)
    resources:
        time_min = 180,
        cpus = len(SAMPLES) if len(SAMPLES) < 32 else 32
    params:
        job_name = f"{config['proj']}_TRIMSINGLE"
    shell:
        f"""trim_galore -j {{resources.cpus}} --stringency 3 \
            -o {PREFIX}/fastq_trimmed {{input}}"""

rule trimgalore_paired:
    input:
        expand(f"{PREFIX}/fastq/{{sample}}_{{i}}.{EXT}", sample=SAMPLES, i=[1, 2])
    output:
        expand(f"{PREFIX}/fastq_trimmed/{{sample}}_{{i}}_val_{{i}}.fq.gz", sample=SAMPLES, i=[1, 2])
    resources:
        time_min = 180,
        cpus = len(SAMPLES) * 2 if len(SAMPLES) < 16 else 32
    params:
        job_name = f"{config['proj']}_TRIMPAIRED"
    shell:
        f"""trim_galore -j {{resources.cpus}} --stringency 3 --paired \
            -o {PREFIX}/fastq_trimmed {{input}}"""

rule star_alignment:
    input:
        reads = get_trimmed_reads
    output:
        f"{PREFIX}/bam/{{sample}}.bam"
    resources:
        time_min = int(custom_param('star_time', 60)),
        cpus = int(custom_param('star_cpus', 12))
    params:
        job_name = f"{config['proj']}_{{sample}}_STARALIGN"
    run:
        shell(f"""STAR \
        --runThreadN {{resources.cpus}} \
        --genomeDir {config['star'][ORGANISM]} \
        --sjdbGTFfile {config['gtf'][ORGANISM]} \
        --readFilesIn {{input.reads}} \
        --readFilesCommand gunzip -c \
        --outFileNamePrefix {PREFIX}/bam/{{wildcards.sample}} \
        --outSAMtype BAM Unsorted \
        --outSAMunmapped Within \
        --outSAMattributes Standard
        """)
        shell(f"samtools sort -@ {{resources.cpus}} \
        {PREFIX}/bam/{{wildcards.sample}}Aligned.out.bam \
        -o {PREFIX}/bam/{{wildcards.sample}}.bam")

rule featureCounts_counting:
    input:
        expand(f"{PREFIX}/bam/{{sample}}.bam", sample=SAMPLES)
    output:
        f"{PREFIX}/processed/{config['proj']}_rawCounts.txt"
    resources:
        time_min = 30,
        cpus = len(SAMPLES) if len(SAMPLES) < 32 else 32
    params:
        job_name = f"{config['proj']}_FEATURECOUNTS",
        paired = '-p' if LAYOUT == 'PAIRED' else ''
    run:
        strandedness = infer_strandedness(config['bed'][ORGANISM], input[0])

        shell(f"""featureCounts \
        -a {config['gtf'][ORGANISM]} \
        -T {{resources.cpus}} \
        -s {strandedness} \
        {{params.paired}} \
        -o {PREFIX}/processed/{config['proj']}_featurecounts_raw.txt \
        {{input}}
        """)
        shell(f"""python3 script/format_featurecounts.py \
        -i {PREFIX}/processed/{config['proj']}_featurecounts_raw.txt \
        -o  {PREFIX}/processed/{config['proj']}_rawCounts.txt
        """)

rule multiqc:
    input:
        qc_report = get_fastqc,
        bam = expand(f"{PREFIX}/bam/{{sample}}.bam", sample=SAMPLES)
    output:
        f"{PREFIX}/qc/multiqc_report.html"
    resources:
        time_min = 30,
        cpus = 1
    params:
        job_name = f"{config['proj']}_MULTIQC"
    conda:
        "envs/qc.yml"
    shell:
        f"multiqc -o {PREFIX}/qc {PREFIX}"